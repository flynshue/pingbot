on:
  pull_request:
  push:
    branches:
      - main

jobs:
  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:
      - run: echo "hello"

      - name: Test some arrays
        env:
          ACTIONS: "create run clean"
        run: |
          for action in ${ACTIONS[@]}; do mkdir $action; done

      - run: ls -l

  #     # Use the output from the `hello` step
  #     - name: Get tag version
  #       run: echo "The tag version ${{ steps.version.outputs.version }}"

  #     - run: echo "GITHUB_HEAD_REF ${{ github.sha }}"

  #     - name: git checkout
  #       uses: actions/checkout@v2

  #     - run: git rev-parse HEAD
  # version:
  #   runs-on: ubuntu-latest
  #   name: read version
  #   outputs:
  #     version: ${{ steps.versions.outputs.version }}
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3

  #     - name: Set UUID
  #       id: generate-uuid
  #       uses: filipstefansson/uuid-action@v1
  #       with:
  #         name: ${{ github.sha }}

  #     # use the output from the `generate-uuid` step
  #     - name: Get the UUID
  #       id: versions
  #       run: |
  #         tag_version=$(echo "${{ github.sha }}-${{ steps.generate-uuid.outputs.uuid }} | sha1sum")
  #         echo "version=v$(date +%Y-%d-%m)-${tag_version:0:4}" >> $GITHUB_OUTPUT

  #     - name: print version
  #       run: |
  #         echo "${{ steps.versions.outputs.version }}"

  # build:
  #   runs-on: ubuntu-latest
  #   name: build
  #   needs: version
  #   strategy:
  #     matrix:
  #       component: [foo]
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3

  #     - name: create a dummy version file
  #       run: echo "${{ needs.version.outputs.version }}" > VERSION

  #     - name: test component build
  #       run: |
  #         echo "docker tag test-app/${{ matrix.component }}:${{ needs.version.outputs.version }}"

  #     - name: read version file
  #       run: cat VERSION

  #     - name: test working-directory
  #       run: echo "test" > test
  #       working-directory: docs

  #     - name: list contents
  #       run: ls -l

  #     - name: remove version file
  #       run: rm VERSION

  # tag:
  #   runs-on: ubuntu-latest
  #   needs: [version, build]
  #   if: github.event_name == 'push'
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3

  #     - name: check for tag
  #       run: echo "check for git tag ${{ needs.version.outputs.version }}"

  #     - name: create tag
  #       run: echo "create git tag goes here"

  # promote:
  #   runs-on: ubuntu-latest
  #   needs: [version, build, tag]
  #   if: github.event_name == 'push'
  #   strategy:
  #     matrix:
  #       component: [foo]
  #   steps:
  #     - name: promte image
  #       run: echo "promte docker image ${{ matrix.component }}"
